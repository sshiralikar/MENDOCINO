/*
Title : STDBASE_PROGRAM_ELEMENT_AUTOMATION
Purpose : Assess fees by program element
Author: Ali Hasan

Functional Area :

JSON Example : 
{
  "EnvHealth/Rec Health/Pool/Application": {
    "ApplicationSubmitAfter": [
      {
    	  "metadata": {
              "description": "To automate the fee by program element",
              "operators": {}
            },
            "criteria": {},
            "preScript": "",
        "action": {
          "assessFees": [
            {
              "feeSchedule": "EH_RECHLTH",
              "feeQuantity": 1,
              "feeInvoice": "Y",
              "feePeriod": "FINAL"
            }
          ]
        }
      }
    ]
  }
}
*/
try {	
	// This should be included in all Configurable Scripts
	eval(getScriptText("CONFIGURABLE_SCRIPTS_COMMON"));
	var scriptSuffix = "PROGRAM_ELEMENT_AUTOMATION";					   
	var settingsArray = [];
	isConfigurableScript(settingsArray, scriptSuffix);
	
	for (s in settingsArray) {
		
		var rules = settingsArray[s];
		logDebug("**INFO JSON: "+JSON.stringify(rules));
		var assessFees = rules.action.assessFees;
		logDebug("**INFO assessFees: "+assessFees.feeSchedule);
		
		// in case the permit record linked to APP record no need to add invoice because the invoice has been set on application record. 
		//this exception because event:application submit after fires on permit record after generated by code script
		// need to find this record has child record if yes ---> this mean we need to cancel the process 
	
		var isHasChildRecord = aa.cap.getChildByMasterID(capId).getSuccess()
		if(isHasChildRecord){ 
		cancelCfgExecution = true ; 
		logDebug("**WARN STDBASE Script [" + scriptSuffix + "] canceled by cancelCfgExecution , becuase the record type is permit and has app, so the fees already invoiced op app level");
		}
		
		if (cancelCfgExecution) {
			logDebug("**WARN STDBASE Script [" + scriptSuffix + "] canceled by cancelCfgExecution");
			cancelCfgExecution = false;
			continue;
		}		
					
		ProgramElementAutomation();
	}

} catch (ex) {

	logDebug("**ERROR:Exception while verificaiton the rules" + ex);
}

function ProgramElementAutomation()
{
	var programElementValue = getProgramElementASIValue();	
	if(!programElementValue)
	{
		logDebug("**INFO programElementValue is empty or null, STDBASE Script [" + scriptSuffix + "]");
		return false;
	}
	
	var stdArray = getStandardChoiceArray('FeeCodebyProgramElement');
	if (stdArray == null || stdArray.length == 0) {
		logDebug("**INFO stdArray is empty or null, STDBASE Script [" + scriptSuffix + "]");
	}
	
	var feeSchedule = null;
	if (!isEmptyOrNull(assessFees)) {
	    feeSchedule = assessFees.feeSchedule;
		var feeQuantity = parseInt(assessFees.feeQuantity);
		var feeInvoice = assessFees.feeInvoice;
		var feePeriod = assessFees.feePeriod;
		
		if(!feeSchedule)
		{
			logDebug("**INFO feeSchedule is empty or null, STDBASE Script [" + scriptSuffix + "]");
			return false;
		}
		if(!feeQuantity)
		{
			logDebug("**INFO feeQuantity is empty or null, STDBASE Script [" + scriptSuffix + "]");
			return false;
		}						
		if(!feePeriod)
		{
			logDebug("**INFO feePeriod is empty or null, STDBASE Script [" + scriptSuffix + "]");
			return false;
		}
		if(feeInvoice == null || feeInvoice.trim().length == 0)//this check differ from the above parameters because this parameter type is boolean 
		{
			logDebug("**INFO feeInvoice is empty or null, STDBASE Script [" + scriptSuffix + "]");
			return false;
		}			
	}
	else
	{
		logDebug("**INFO assessFees is empty or null, STDBASE Script [" + scriptSuffix + "]");
		return false;
	}
	

	
	var feeCode = null;	
	var cfgFeeCode = null;
	var arrFees = aa.finance.getFeeItemList(null,feeSchedule,null).getOutput();
	for (xx in arrFees)
	{
	  cfgFeeCode = arrFees[xx].getFeeCod();
	  for (iSC in stdArray) {			
			if (stdArray[iSC]["active"] == "A") {
				var scValue = String(stdArray[iSC]["value"]);
				var scValueDesc = (stdArray[iSC]["valueDesc"] != null) ? String(stdArray[iSC]["valueDesc"]) : "";
				
				if (scValueDesc == programElementValue && scValue == String(cfgFeeCode))
				{
					feeCode = scValue;
					break;
				}
			}
		}
	}
	logDebug('fee code::' + feeCode);
	if(!feeCode)
	{
		logDebug("**INFO feeCode is empty or null, STDBASE Script [" + scriptSuffix + "]");
		return false;
	}
	 
	var feeResult = aa.fee.getFeeItems(capId, feeCode, null);
	if (feeResult.getSuccess()) {	
		var feeObjArr = feeResult.getOutput();
		if(feeObjArr != null && feeObjArr.length > 0) 
		{
			return false;//Fees already assessed for this fee code
		}
	} else {	
		logDebug("**ERROR: getting fee items: " + feeResult.getErrorMessage());
		return false;
	}
		
	addFee(feeCode, feeSchedule, feePeriod, feeQuantity, feeInvoice);	
}

function getProgramElementASIValue()
{
	var updated = false;
	var i=0;
	var itemCap = capId;	
   		
    var appSpecInfoResult = aa.appSpecificInfo.getByCapID(itemCap);
	if (appSpecInfoResult.getSuccess())
 	{
		var appspecObj = appSpecInfoResult.getOutput();
		
		for (i in appspecObj)
		{
			if( appspecObj[i].getCheckboxDesc() == 'Program Element')
			{
				return appspecObj[i].getChecklistComment();
				break;
			}		
		}
	} 
	else
		{ logDebug( "**ERROR: getting app specific info (Program Element) for Cap : " + appSpecInfoResult.getErrorMessage()) }
}

function getStandardChoiceArray(stdChoice) {	
	var cntItems = 0;
	var stdChoiceArray = new Array();
	var bizDomScriptResult = aa.bizDomain.getBizDomain(stdChoice);
	if (bizDomScriptResult.getSuccess()) {
		var bizDomScriptObj = bizDomScriptResult.getOutput();
		if (bizDomScriptObj != null) {
			cntItems = bizDomScriptObj.size();
			logDebug("getStdChoiceArray: " + stdChoice + " size = " + cntItems);
			if (cntItems > 0) {
				var bizDomScriptItr = bizDomScriptObj.iterator();
				while (bizDomScriptItr.hasNext()) {
					var bizBomScriptItem = bizDomScriptItr.next();
					var stdChoiceArrayItem = new Array();
					stdChoiceArrayItem["value"] = bizBomScriptItem.getBizdomainValue();
					stdChoiceArrayItem["valueDesc"] = bizBomScriptItem.getDescription();
					stdChoiceArrayItem["active"] = bizBomScriptItem.getAuditStatus();
					stdChoiceArray.push(stdChoiceArrayItem);
				}
			}
			else
			{
				logDebug("getStdChoiceArray: WARNING stdChoice not found, has no items, or disabled - " + stdChoice);
			}
		} else {
			logDebug("getStdChoiceArray: WARNING stdChoice not found - " + stdChoice);
		}
	}
	else
	{
		logDebug("**ERROR: getting standard choice " + stdChoice + " :" + bizDomScriptResult.getErrorMessage());
	}
	return stdChoiceArray;
}
